{"version":3,"sources":["Heading.js","Like.js","Band.js","App.js","serviceWorker.js","index.js"],"names":["Heading","style","styles","navbar","left","titleFont","to","right","background","maxWidth","height","display","alignItems","justifyContent","flexDirection","paddingLeft","paddingRight","justifySelf","font","color","margin","fontSize","fontWeight","textDecoration","Like","props","state","numLikes","handleClick","bind","by","this","setState","container","type","onClick","Component","none","Band","band","name","body","split","info","formed","origin","fans","width","App","console","log","data","className","app","bands","all","length","map","i","key","band_name","backgroundColor","minHeight","minWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.597c9273.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Heading () {\n  return (\n    <div style={styles.navbar}>\n      <div style={styles.left}>\n        <p style={styles.titleFont} to=\"/\">FEW 1.2 Final Assessment</p>\n      </div>\n      <div style={styles.right}>\n        <p style={styles.titleFont}>Shashwat Prajjwal</p>\n      </div>\n    </div>\n  )\n}\n\n\nexport default Heading;\n\nconst styles = {\n  navbar: {\n    background: '#B8E1FF',\n    maxWidth: '100vw',\n    height: '5rem',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    paddingLeft: '5vw',\n    paddingRight: '5vw'\n\n  },\n  left: {\n    justifySelf: 'flex-start'\n  },\n  right: {\n    display:'flex',\n    justifyContent: 'space-around'\n  },\n  font: {\n    color: '#0A2342',\n    margin: '.4em',\n    fontSize: '1.2rem',\n    fontWeight: '300',\n    textDecoration: 'none'\n  },\n  titleFont: {\n    color: '#333',\n    fontSize: '1.6rem',\n    fontWeight: '500',\n    textDecoration: 'none'\n  }\n\n}","import React, {Component} from 'react'\n\nclass Like extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      numLikes: 0\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleClick(by) {\n    this.setState({numLikes: this.state.numLikes + by})\n  }\n\n  render() {\n    return (\n      <div style={styles.container}>\n        <div style={styles.left}>\n          <button type=\"button\" onClick={() => this.handleClick(1)}>UP</button>\n          <button type=\"button\" onClick={() => this.handleClick(-1)}>DOWN</button>\n        </div>\n      <p style={styles.right}>Like: {this.state.numLikes}</p>\n      </div>\n    )\n  }\n}\n\nexport default Like;\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n  right: {\n    color: 'white'\n  },\n  none: {\n    display: 'none'\n  },\n  left: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between'\n  }\n}","import React from 'react'\nimport Like from './Like'\n\nfunction Band(props) {\n  return (\n    <div style={styles.band}>\n      <h3 style={styles.name}>{props.name}</h3>\n      <div style={styles.body}>\n        <div style={styles.left}>\n          {props.split === '-' ? \n          <Like/>: \n          <p style={styles.split}>SPLIT in: {props.split}</p>}\n        </div>\n        <div style={styles.right}>\n          <p style={styles.info}>Formed: {props.formed} {props.origin} Fans: {props.fans}</p>\n        </div>             \n      </div>\n    </div>\n  )\n}\n\nexport default Band;\n\nconst styles = {\n  name: {\n    color: 'white'\n  },\n  info: {\n    color: 'white'\n  },\n  body: {\n    display: 'flex',\n    margin: 'auto',\n    justifyContent: \"space-between\",\n    width: '70vw'\n  },\n  split: {\n    color:'white'\n  }\n}","import React from 'react';\nimport './App.css';\n\nimport Heading from './Heading'\nimport data from './metal.json'\nimport Band from './Band'\n\nfunction App() {\n  console.log(data)\n  return (\n    <div className=\"App\" style={styles.app}>\n      <Heading/>  \n      <div style={styles.bands}>\n        <p style={styles.all}>Bands: {data.length}</p>\n        {\n          data.map((band, i) => { // data takes a function as a parameter\n            return ( // Return a component\n              <Band \n                  key={i}\n                  name={band.band_name} \n                  formed={band.formed} \n                  origin={band.origin} \n                  fans={band.fans} \n                  split={band.split}\n              />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst styles = {\n  app: {\n    backgroundColor: 'black',\n    minHeight: '100vh',\n    minWidth: '100vw'\n  },\n  bands: {\n\n  },\n  all: {\n    color: 'white'\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}